RELATÓRIO

1. Termo de compromisso

Os membros do grupo afirmam que todo o código desenvolvido para este
trabalho é de autoria própria.  Exceto pelo material listado no item 3
deste relatório, os membros do grupo afirmam não ter copiado
material da Internet nem obtiveram código de terceiros.

2. Membros do grupo e alocação de esforço

Preencha as linhas abaixo com o nome e o e-mail dos integrantes do
grupo.  Substitua XX pela contribuição de cada membro do grupo no
desenvolvimento do trabalho.

Luís Felipe Ramos Ferreira lframos_ferreira@outlook.com 50%
Igor Lacerda Faria da Silva igorlafarsi@gmail.com 50%

3. Referências bibliográficas

Livros:
    - Tanenbaum, A. S. & Bos, H. (2014), Modern Operating Systems , Pearson , Boston, MA .
    - Abraham Silberschatz, Peter Baer Galvin, Greg Gagne: Operating System Concepts, 10th Edition. Wiley 2018, ISBN 978-1-118-06333-0
    - Arpaci-Dusseau, Remzi H., Arpaci-Dusseau, Andrea C.. (2014). Operating systems: three easy pieces . : Arpaci-Dusseau Books.

Web:
    - https://www.digitalocean.com/community/tutorials/execvp-function-c-plus-plus
    - https://man7.org/linux/man-pages/man2/open.2.html
    - https://www.youtube.com/watch?v=cex9XrZCU14&list=PLfqABt5AS4FkW5mOn2Tn9ZZLLDwA3kZUY
    - https://pubs.opengroup.org/onlinepubs/009604499/functions/kill.html#:~:text=The%20kill()%20function%20shall,no%20signal%20is%20actually%20sent.
    - https://web.archive.org/web/20191222201924/http://www.termsys.demon.co.uk/vtansi.htm
    - https://www.cs.kent.edu/~ruttan/sysprog/lectures/multi-thread/multi-thread.html

Youtube:
    - https://www.youtube.com/@CodeVault
    - https://www.youtube.com/@JacobSorber

4. Estruturas de dados

Descreva e justifique as estruturas de dados e algoritmos utilizados
em sua solução.

PARTE I - Desenvolvimento do Shell

Para completar a construção do Shell proposto foi necessária uma maior familiarização com a parte prática da
criação de novos processos, assim como da parte de criação de pipes.
Para execução dos comandos passados no Shell, foi utilizada a função execvp(), quer permite a apssagem dos parâmetros
do comando como um vetor de strings.
Para os casos de redirecionamento, é necessário checar qual o tipo de redirecionamento utilizado, para que seja claro se o arquivo
passado como parâmetro deverá ser utilizado como entrada ou saída do comando utilizado, e o arquivo possa ser duplicado para
o local correto.
Para os pipes, é necessário criar um processor filho referente a cada um dos comandos que serão executados, ou seja,
tanto o comando do lado esquerdo quanto o comando do lado direito. O comando do lado esquerdo tem sua saída padrão redirecionada
para a entrada do pipe, e o comando do lado direito tem sua entrada padrão redirecionada para a saída do pipe. No processo
pai, utilizamos a função waitpid() para que os comandos sejam executados na ordem correta.

PARTE II - Desenvolvimento do Top

Inicialmente apenas foram extraídos os dados dos arquivos, como qualquer leitura de arquivo em C. Para extrair o campo "usuário", que 
não faz parte do arquivo, foi necessário verificar quem era o dono do arquivo usando uma biblioteca do sistema. Adicionalmente, como nem todo 
diretório da pasta /proc corresponde a um processo, foi adicionada essa verficação também. Em particular, checa-se se o nome do diretório 
é um número inteiro, característica da forma como o diretória é organizado, isto é, as pastas relativas a um processo possuem como nome o inteiro 
identificador desses processos. Em seguida, a função foi extraída e colocada em uma thread, seguindo o exemplo dos slides disponibilizados pelo professor.
Por fim, foi criada a função para a leitura e processamento de sinais, que também foi colocada em outra thread. A biblioteca pthreads foi utilizada, conforme
sugerido pela especificação do trabalho.
